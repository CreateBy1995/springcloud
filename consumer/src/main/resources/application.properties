server.port=8085
# Eureka 上注册的服务名称
spring.application.name=consumer
# Eureka 注册中心URL
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
# 由于是消费者 暂时不需要被调用 所以只要向Eureka获取注册列表即可 而不用注册
eureka.client.register-with-eureka=false


# 默认请求处理的超时时间
ribbon.ReadTimeout=500
# 服务1请求的重试次数
PROVIDER1.ribbon.MaxAutoRetries=3
# 服务2请求的重试次数
PROVIDER2.ribbon.MaxAutoRetries=1
# 请求失败后实例切换最大次数
# 例如 A服务有两个实例，实例1调用超时 则ribbon会根据先重试 MaxAutoRetries 配置的次数 例如5
# 如果5次都失败了  则ribbon会切换实例 跑去调用实例2 , 此时切换次数MaxAutoRetriesNextServer为1
# 如果实例2也超时  则继续重试5次，如果5次都失败 则继续切换调用实例1 此时切换次数MaxAutoRetriesNextServer为2
# 等到切换次数MaxAutoRetriesNextServer到达配置的数值后,并且重试5次后还未成功。 则直接返回错误页面
ribbon.MaxAutoRetriesNextServer=2

# 开启Hystrix断路器
feign.hystrix.enabled=true
# 设置默认熔断超时时间 (如果在此时间内抛出异常也会直接返回降级服务)
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
# 指定配置某个方法的熔断时间
hystrix.command.ConsumerService#getProvider1(String).execution.isolation.thread.timeoutInMilliseconds=500

# 开启Actuator  web的一些访问端点 hystrix.stream端点如果不开启 则 hystrix Dashboard 无法监控到
management.endpoints.web.exposure.include: hystrix.stream,beans,health